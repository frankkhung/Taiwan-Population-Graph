install.packages("sf"
)
# read gpkg in
library(sf)
install.packages("sf")
install.packages("sf")
# read gpkg in
library(sf)
data <- st_read("data/kontur_population_TW_20220630.gpkg")
View(data)
View(data)
View(data)
str(data)
install.packages("rgdal")#安裝 讀取shp檔案的套件
library(rgdal)
taiwan <- readOGR("data/gadm35")
taiwan <- readOGR("data/gadm36_TWN_2.shp")
library(rgdal)
taiwan <- readOGR("data/gadm36_TWN_2.shp")
taiwan <- sf::readOGR("data/gadm36_TWN_2.shp")
taiwan <- rgdal::readOGR("data/gadm36_TWN_2.shp")
?readOGR
taiwan <- readOGR(dsn = "data/gadm36_TWN_2.shp")
taiwan <- read_sf("data/gadm36_TWN_2.shp")
taiwan <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taiwan <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taiwan <- read_sf("data/gadm 36_TWN_shp/gadm36_TWN_2.shp")
taiwan <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taiwan <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
View(taiwan)
library(tidyverse)
taiwan <- taiwan |>
taiwan <- taiwan_data %>%
st_transform(crs = st_crs(data))
taiwan <- taiwan_data %>% st_transform(crs = st_crs(data))
taiwan_data <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taiwan <- taiwan_data %>% st_transform(crs = st_crs(data))
View(taiwan_data)
View(taiwan)
View(taiwan)
#load taiwan data
taiwan_data <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
# read gpkg in
library(sf)
library(tidyverse)
#load the kontur data
data <- st_read("data/kontur_population_TW_20220630.gpkg")
#load taiwan data
taiwan_data <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taiwan <- taiwan_data %>% st_transform(crs = st_crs(data))
taiwan %>% ggplot() + geom_sf()
# read gpkg in
library(sf)
library(tidyverse)
#load the kontur data
data <- st_read("data/kontur_population_TW_20220630.gpkg")
#load taiwan data
taiwan_data <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taiwan <- taiwan_data %>% st_transform(crs = st_crs(data))
taiwan %>% ggplot() + geom_sf()
data %>% ggplot() + geom_sf()
View(taiwan)
View(taiwan)
hsinchu <- taiwan_data %>%
filter(NAME_2 = Taipei) %>%
st_transform(crs = st_crs(data))
hsinchu <- taiwan_data %>%
filter(NAME_2 == "Taipei") %>%
st_transform(crs = st_crs(data))
View(hsinchu)
hsinchu_pop <- st_intersection(data, hsinchu)
View(hsinchu_pop)
# read gpkg in
library(sf)
library(tidyverse)
#load the kontur data
data <- st_read("data/kontur_population_TW_20220630.gpkg")
#load taiwan data
taiwan_data <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taipei <- taiwan_data %>%
filter(NAME_2 == "Taipei") %>%
st_transform(crs = st_crs(data))
taipei_pop <- st_intersection(data, taipei)
taipei_pop %>% ggplot() %>% geom_sf()
taipei_pop %>% ggplot() + geom_sf()
bb <- st_bbox(taipei_pop)
bb
st_point(c(bb[["xmin"]], bb[["ymin"]]))
st_point(c(bb[["xmin"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
bottom_left <- st_point(c(bb[["xmin"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
bottom_right <- st_point(c(bb[["xmax"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
taipei_pop %>% ggplot() + geom_sf() + geom_sf(data = bottom_left)
width <- st_distance(bottom_left, bottom_right)
width
height <- st_distance(bottom_left, top_left)
top_left <- st_point(c(bb[["xmin"]], bb[["ymax"]])) %>%
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
if (width > height) {
w_ratio <- 1
h_ratio <- height/width
} else {
h_ratio <- 1
m_ratio <- width/height
}
if (width > height) {
w_ratio <- 1
h_ratio <- height/width
} else {
h_ratio <- 1
w_ratio <- width/height
}
install.packages("stars")
library(stars)
size <- 1000
taipei_rast <- st_rasterize(taipei_pop,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
taipei_rast <- st_rasterize(taipei_pop,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
w_ratio
w_ratio[1]
w_ratio[1][1]
w_ratio[1,1]
taipei_rast <- st_rasterize(taipei_pop,
nx = floor(size * w_ratio[1,1]),
ny = floor(size * h_ratio[1,1]))
taipei_rast <- st_rasterize(taipei_pop,
nx = floor(size * 0.858),
ny = floor(size * 1))
View(taipei_rast)
taipei_rast[["population"]]
# read gpkg in
library(sf)
library(tidyverse)
library(stars)
#load the kontur data
data <- st_read("data/kontur_population_TW_20220630.gpkg")
#load taiwan data
taiwan_data <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taipei <- taiwan_data %>%
filter(NAME_2 == "Taipei") %>%
st_transform(crs = st_crs(data))
taipei_pop <- st_intersection(data, taipei)
taipei_pop %>% ggplot() + geom_sf()
# translate into a matrix format
bb <- st_bbox(taipei_pop)
bottom_left <- st_point(c(bb[["xmin"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
bottom_right <- st_point(c(bb[["xmax"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
width <- st_distance(bottom_left, bottom_right)
top_left <- st_point(c(bb[["xmin"]], bb[["ymax"]])) %>%
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
# handle conditions of width or height being the longer side
if (width > height) {
w_ratio <- 1
h_ratio <- height/width
} else {
h_ratio <- 1
w_ratio <- width/height
}
View(taipei_pop)
View(taipei_pop)
View(taipei_pop)
height <- st_distance(bottom_left, top_left)
height
View(taipei)
#load taiwan data
taiwan_data <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taipei <- taiwan_data %>%
filter(NAME_2 == "Taipei") %>%
st_transform(crs = st_crs(data))
taipei_pop <- st_intersection(taipei, data)
View(taipei_pop)
str(taipei_pop)
taipei_pop <- taipei_pop %>% select(NAME_2, population, geometry)
bb <- st_bbox(taipei_pop)
bottom_left <- st_point(c(bb[["xmin"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
bottom_right <- st_point(c(bb[["xmax"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
width <- st_distance(bottom_left, bottom_right)
top_left <- st_point(c(bb[["xmin"]], bb[["ymax"]])) %>%
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
# handle conditions of width or height being the longer side
if (width > height) {
w_ratio <- 1
h_ratio <- height/width
} else {
h_ratio <- 1
w_ratio <- width/height
}
size <- 1000
taipei_rast <- st_rasterize(taipei_pop,
nx = floor(size * 0.858),
ny = floor(size * 1))
View(taipei_rast)
taipei_rast <- st_rasterize(taipei_pop,
nx = floor(size * w_ratio),
ny = floor(size * h_ratio))
mat <- matrix(taipei_rast$population,
nx = floor(size * 0.858),
ny = floor(size * 1))
mat <- matrix(taipei_rast$population,
nrow = floor(size * 0.858),
ncol = floor(size * 1))
install.packages("rayshader")
install.packages("terra")
install.packages("rgdal")
install.packages("terra")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
devtools::install_github("tylermorganwall/rayshader")
install.packages(:cli)
install.packages("cli")
install.packages("cli")
install.packages("cli")
devtools::install_github("tylermorganwall/rayshader")
install.packages('terra', repos='https://rspatial.r-universe.dev')
library(rayshader)
install.packages("rayshader")
library(rayshader)
# read gpkg in
library(sf)
library(tidyverse)
library(stars)
library(rayshader)
# read gpkg in
library(sf)
library(tidyverse)
library(stars)
library(rayshader)
library(MetBrewer)
library(colorspace)
#load the kontur data
data <- st_read("data/kontur_population_TW_20220630.gpkg")
#load taiwan data
taiwan_data <- read_sf("data/gadm36_TWN_shp/gadm36_TWN_2.shp")
taipei <- taiwan_data %>%
st_transform(crs = st_crs(data))
taipei_pop <- st_intersection(taipei, data)
taipei_pop <- taipei_pop %>% select(NAME_2, population, geometry)
# translate into a matrix format
bb <- st_bbox(taipei_pop)
bottom_left <- st_point(c(bb[["xmin"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
bottom_right <- st_point(c(bb[["xmax"]], bb[["ymin"]])) %>%
st_sfc(crs = st_crs(data))
width <- st_distance(bottom_left, bottom_right)
top_left <- st_point(c(bb[["xmin"]], bb[["ymax"]])) %>%
st_sfc(crs = st_crs(data))
height <- st_distance(bottom_left, top_left)
# handle conditions of width or height being the longer side
if (width > height) {
w_ratio <- 1
h_ratio <- height/width
} else {
h_ratio <- 1
w_ratio <- width/height
}
# convert to raster so we can convert to matrix
size <- 1000
taipei_rast <- st_rasterize(taipei_pop,
nx = floor(size * 0.866),
ny = floor(size * 1))
mat <- matrix(taipei_rast$population,
nrow = floor(size * 0.866),
ncol = floor(size * 1))
# create color palette
c1 <- met.brewer("OKeeffe2")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1, bias = 2)(256)
swatchplot(texture)
# plot that 3d thing!
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100/5,
shadowdepth = 1)
?plot_3d
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100/5)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100/5)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .8)
outfile <- "images/final_plot.png"
{
start_time <- Sys.time()
cat(crayon::cyan(start_time), "\n")
if (!file.exists(outfile)) {
png::writePNG(matrix(1), target = outfile)
}
render_highquality(
filename = outfile,
interactive = FALSE,
lightdirection = 280,
lightaltitude = c(20, 80),
lightcolor = c(c1[2], "white"),
lightintensity = c(600, 100),
samples = 450,
width = 6000,
height = 6000
)
end_time <- Sys.time()
diff <- end_time - start_time
cat(crayon::cyan(diff), "\n")
}
png::writePNG(mat, target = outfile)
View(mat)
?render_camera
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .5)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .4)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 5,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -20, phi = 45, zoom = .8)
render_camera(theta = -30, phi = 45, zoom = .8)
render_camera(theta = -30, phi = 80, zoom = .8)
render_camera(theta = -30, phi = 30, zoom = .8)
render_camera(theta = -90, phi = 30, zoom = .5, fov = 130)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100 / 10,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -90, phi = 30, zoom = .5, fov = 130)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -90, phi = 30, zoom = .5, fov = 130)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -90, phi = 30, zoom = .5, fov = 130)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = -90, phi = 30, zoom = .5)
render_camera(theta = -90, phi = 40, zoom = .5)
render_camera(theta = -90, phi = 50, zoom = .5)
render_camera(theta = 0, phi = 50, zoom = .5)
render_camera(theta = 0, phi = 50, zoom = .4)
render_camera(theta = 0, phi = 50, zoom = .6)
render_camera(theta = 0, phi = 70, zoom = .6)
render_camera(theta = 0, phi = 40, zoom = .6)
render_camera(theta = 0, phi = 20, zoom = .6)
render_camera(theta = 0, phi = 30, zoom = .6)
render_camera(theta = 0, phi = 40, zoom = .6)
outfile <- "images/final_plot.png"
!file.exists(outfile)
start_time <- Sys.time()
cat(crayon::cyan(start_time), "\n")
c1 <- met.brewer("OKeeffe2")
swatchplot(c1)
render_highquality(
filename = "images/final_plot.png",
)
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = 0, phi = 40, zoom = .6)
render_highquality(
filename = "images/final_plot.png",
)
# convert to raster so we can convert to matrix
size <- 1000
taipei_rast <- st_rasterize(taipei_pop,
nx = floor(size * 0.866),
ny = floor(size * 1))
mat <- matrix(taipei_rast$population,
nrow = floor(size * 0.866),
ncol = floor(size * 1))
# create color palette
c1 <- met.brewer("OKeeffe2")
swatchplot(c1)
texture <- grDevices::colorRampPalette(c1, bias = 2)(256)
swatchplot(texture)
# plot that 3d thing!
rgl::rgl.close()
mat |>
height_shade(texture = texture) |>
plot_3d(heightmap = mat,
zscale = 100,
solid = FALSE,
shadowdepth = 0)
render_camera(theta = 0, phi = 40, zoom = .6)
render_highquality(
filename = "images/final_plot.png",
)
?render_highquality
